// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gVLjp5jEanpB9JmP1wfhu5
// Component: xKf7GNmvC6
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "antd/lib/button"; // plasmic-import: kv6Mk_JNYw/codeComponent
import Button2 from "../../Button"; // plasmic-import: OiEpCGxwidZ/component
import TextInput from "../../TextInput"; // plasmic-import: VEoZuKV-qCO/component
import Select from "../../Select"; // plasmic-import: I-YmR_8FdnC/component
import TextArea from "antd/lib/input/TextArea"; // plasmic-import: ZJIPHLoTjkN/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_zaviago_react_builder.module.css"; // plasmic-import: gVLjp5jEanpB9JmP1wfhu5/projectcss
import sty from "./PlasmicEmailNewOrder.module.css"; // plasmic-import: xKf7GNmvC6/css
import IconsvgIcon from "./icons/PlasmicIcon__Iconsvg"; // plasmic-import: ghfrvXPxoN/icon
import framesvgQpMvVUojHj from "./images/framesvg.svg"; // plasmic-import: qpMvVUojHj/picture

export const PlasmicEmailNewOrder__VariantProps = new Array();

export const PlasmicEmailNewOrder__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicEmailNewOrder__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.columns__s53B0)}>
            <div className={classNames(projectcss.all, sty.column__tsOdz)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__x5MBp
                )}
              >
                {"email new order."}
              </h1>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mj4OI
                )}
              >
                {
                  "New order emails are sent to chosen recipient(s) when a new order is received."
                }
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__f5BtZ)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__u7FNk)}
              >
                <div className={classNames(projectcss.all, sty.column__eAbW9)}>
                  <Button
                    className={classNames(
                      "__wab_instance",
                      sty.antdButton__sdmHf
                    )}
                    size={"medium"}
                    type={"default"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gSb8
                      )}
                    >
                      {"Back"}
                    </div>
                  </Button>
                </div>

                <div className={classNames(projectcss.all, sty.column__d2MuO)}>
                  <Button2
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    showStartIcon={true}
                    startIcon={
                      <IconsvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5N9GU
                      )}
                    >
                      {"Save Changes"}
                    </div>
                  </Button2>
                </div>
              </p.Stack>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.columns__hSvM4)}>
            <div
              data-plasmic-name={"notification"}
              data-plasmic-override={overrides.notification}
              className={classNames(projectcss.all, sty.notification)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__eifgV
                )}
              >
                {"information"}
              </h1>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sdgsc
                )}
              >
                {"This information showing to your user."}
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.columns__pveqh)}>
            <div className={classNames(projectcss.all, sty.column__nMevs)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__wBpll)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__yy1YK
                    )}
                  >
                    {"Recipient(s)"}
                  </h1>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ae1Cy)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"12px"}
                    loading={"lazy"}
                    src={{
                      src: framesvgQpMvVUojHj,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
              ) : null}

              <TextInput
                className={classNames("__wab_instance", sty.textInput__jiUfg)}
                defaultValue={"service@zaviago.com"}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__hjh8M)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1___0Ybg
                )}
              >
                {"Status"}
              </h1>

              <Button
                className={classNames("__wab_instance", sty.antdButton__laHCk)}
                danger={false}
                shape={"default"}
                size={"large"}
                type={"default"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gzYe6
                  )}
                >
                  {"Enable"}
                </div>
              </Button>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.columns___4YrJm)}>
            <div className={classNames(projectcss.all, sty.column__aaZnn)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__okGjR)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__vnZc
                    )}
                  >
                    {"Subject"}
                  </h1>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___94Mak)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"12px"}
                    loading={"lazy"}
                    src={{
                      src: framesvgQpMvVUojHj,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
              ) : null}

              <TextInput
                className={classNames("__wab_instance", sty.textInput__xqPdg)}
                defaultValue={""}
                placeholder={"[{site_title}]: New order_number#{order_number}"}
              />
            </div>

            <div className={classNames(projectcss.all, sty.column__alDec)}>
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___8VPTq)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1___7C5Y5
                    )}
                  >
                    {"Email heading"}
                  </h1>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__kNOkr)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"12px"}
                    loading={"lazy"}
                    src={{
                      src: framesvgQpMvVUojHj,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
              ) : null}

              <TextInput
                className={classNames("__wab_instance", sty.textInput__mmf1)}
                defaultValue={""}
                placeholder={"New order:#{order_number}"}
              />
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.columns__jZXtI)}>
            <div className={classNames(projectcss.all, sty.column__kNsOd)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__rSsIt)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__iv11F
                    )}
                  >
                    {"Email type"}
                  </h1>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ji5M4)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"12px"}
                    loading={"lazy"}
                    src={{
                      src: framesvgQpMvVUojHj,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
              ) : null}

              <Select
                data-plasmic-name={"select"}
                data-plasmic-override={overrides.select}
                className={classNames("__wab_instance", sty.select)}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cF6Kp
                    )}
                  >
                    {"HTML"}
                  </div>
                }
              />
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.columns__jybi6)}>
            <div className={classNames(projectcss.all, sty.column__mOa0)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__pMCb3)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__pJsm5
                    )}
                  >
                    {"Additional content"}
                  </h1>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__mDyxb)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"12px"}
                    loading={"lazy"}
                    src={{
                      src: framesvgQpMvVUojHj,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />
                </div>
              ) : null}

              <TextArea
                data-plasmic-name={"antdInputTextArea"}
                data-plasmic-override={overrides.antdInputTextArea}
                allowClear={false}
                aria-label={"Description"}
                aria-labelledby={"Description"}
                className={classNames("__wab_instance", sty.antdInputTextArea)}
                defaultValue={"Congratulations on the sale."}
                name={"Description"}
                placeholder={"Add description"}
                showCount={false}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "button",
    "svg",
    "notification",
    "select",
    "antdInputTextArea"
  ],

  button: ["button", "svg"],
  svg: ["svg"],
  notification: ["notification"],
  select: ["select"],
  antdInputTextArea: ["antdInputTextArea"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEmailNewOrder__ArgProps,
          internalVariantPropNames: PlasmicEmailNewOrder__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEmailNewOrder__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEmailNewOrder";
  } else {
    func.displayName = `PlasmicEmailNewOrder.${nodeName}`;
  }
  return func;
}

export const PlasmicEmailNewOrder = Object.assign(
  // Top-level PlasmicEmailNewOrder renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    notification: makeNodeComponent("notification"),
    select: makeNodeComponent("select"),
    antdInputTextArea: makeNodeComponent("antdInputTextArea"),
    // Metadata about props expected for PlasmicEmailNewOrder
    internalVariantProps: PlasmicEmailNewOrder__VariantProps,
    internalArgProps: PlasmicEmailNewOrder__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEmailNewOrder;
/* prettier-ignore-end */
