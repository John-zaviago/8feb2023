// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gVLjp5jEanpB9JmP1wfhu5
// Component: 5UJc9QYjU5
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "antd/lib/button"; // plasmic-import: kv6Mk_JNYw/codeComponent
import Button2 from "../../Button"; // plasmic-import: OiEpCGxwidZ/component
import Input from "antd/lib/input"; // plasmic-import: tO9wrxr8Nbb/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_zaviago_react_builder.module.css"; // plasmic-import: gVLjp5jEanpB9JmP1wfhu5/projectcss
import sty from "./PlasmicLineOa.module.css"; // plasmic-import: 5UJc9QYjU5/css
import IconsvgIcon from "./icons/PlasmicIcon__Iconsvg"; // plasmic-import: ghfrvXPxoN/icon
import image14SvgUDmUwPfLi from "./images/image14Svg.svg"; // plasmic-import: uDMUwPfLI/picture

export const PlasmicLineOa__VariantProps = new Array();

export const PlasmicLineOa__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicLineOa__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"lineOaSetting"}
            data-plasmic-override={overrides.lineOaSetting}
            className={classNames(projectcss.all, sty.lineOaSetting)}
          >
            <div className={classNames(projectcss.all, sty.column__dpkwf)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__uNpib)}
              >
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"48px"}
                  loading={"lazy"}
                  src={{
                    src: image14SvgUDmUwPfLi,
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />

                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__dAoD6
                  )}
                >
                  {"Line OA setting."}
                </h3>
              </p.Stack>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yTGwd
                )}
              >
                {"Iintegrate WordPress to LINE Products"}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column__xElD)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__ovXgr)}
              >
                <div className={classNames(projectcss.all, sty.column__lDpfJ)}>
                  <Button
                    data-plasmic-name={"antdButton"}
                    data-plasmic-override={overrides.antdButton}
                    className={classNames("__wab_instance", sty.antdButton)}
                    size={"medium"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7Ngjb
                      )}
                    >
                      {"Back"}
                    </div>
                  </Button>
                </div>

                <div
                  className={classNames(projectcss.all, sty.column__dJhbp, "")}
                >
                  <Button2
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames("__wab_instance", sty.button)}
                    showStartIcon={true}
                    startIcon={
                      <IconsvgIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ucMgV
                      )}
                    >
                      {"Save Changes"}
                    </div>
                  </Button2>
                </div>
              </p.Stack>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.columns__nyZkl)}>
            <div className={classNames(projectcss.all, sty.column__w7AuC)} />

            <div className={classNames(projectcss.all, sty.column__qqPy)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__yrkwI
                )}
              >
                {"Setting LINE push messaging."}
              </h1>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fCwf7)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__ip4If
                  )}
                >
                  {"Channel access token"}
                </h3>
              </p.Stack>

              <Input
                data-plasmic-name={"antdInput5"}
                data-plasmic-override={overrides.antdInput5}
                allowClear={false}
                aria-label={"Title"}
                bordered={true}
                className={classNames("__wab_instance", sty.antdInput5)}
                defaultValue={""}
                id={"Title"}
                name={"title"}
                placeholder={"Add access token"}
                size={"large"}
              />

              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__riDgx
                )}
              >
                {"Messaging API Push"}
              </h1>

              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__kyfvq
                )}
              >
                {"Choose options:"}
              </h1>

              <div className={classNames(projectcss.all, sty.columns__ghHcV)}>
                <div
                  className={classNames(projectcss.all, sty.column___1CGod)}
                />

                <div className={classNames(projectcss.all, sty.column__g3JJ)} />
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "lineOaSetting",
    "img",
    "antdButton",
    "button",
    "svg",
    "antdInput5"
  ],

  lineOaSetting: ["lineOaSetting", "img", "antdButton", "button", "svg"],
  img: ["img"],
  antdButton: ["antdButton"],
  button: ["button", "svg"],
  svg: ["svg"],
  antdInput5: ["antdInput5"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicLineOa__ArgProps,
          internalVariantPropNames: PlasmicLineOa__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicLineOa__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLineOa";
  } else {
    func.displayName = `PlasmicLineOa.${nodeName}`;
  }
  return func;
}

export const PlasmicLineOa = Object.assign(
  // Top-level PlasmicLineOa renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    lineOaSetting: makeNodeComponent("lineOaSetting"),
    img: makeNodeComponent("img"),
    antdButton: makeNodeComponent("antdButton"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    antdInput5: makeNodeComponent("antdInput5"),
    // Metadata about props expected for PlasmicLineOa
    internalVariantProps: PlasmicLineOa__VariantProps,
    internalArgProps: PlasmicLineOa__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLineOa;
/* prettier-ignore-end */
