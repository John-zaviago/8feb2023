// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gVLjp5jEanpB9JmP1wfhu5
// Component: vedSlFGWec7
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: OiEpCGxwidZ/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_zaviago_react_builder.module.css"; // plasmic-import: gVLjp5jEanpB9JmP1wfhu5/projectcss
import sty from "./PlasmicCouponPageAddCoupon.module.css"; // plasmic-import: vedSlFGWec7/css
import IconsvgIcon from "./icons/PlasmicIcon__Iconsvg"; // plasmic-import: ghfrvXPxoN/icon
import framesvgQpMvVUojHj from "./images/framesvg.svg"; // plasmic-import: qpMvVUojHj/picture

export const PlasmicCouponPageAddCoupon__VariantProps = new Array();

export const PlasmicCouponPageAddCoupon__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicCouponPageAddCoupon__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"setting"}
            data-plasmic-override={overrides.setting}
            className={classNames(projectcss.all, sty.setting)}
          >
            <div
              data-plasmic-name={"column"}
              data-plasmic-override={overrides.column}
              className={classNames(projectcss.all, sty.column)}
            >
              {true ? (
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                >
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"coupons."}
                  </h1>

                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"12px"}
                    loading={"lazy"}
                    src={{
                      src: framesvgQpMvVUojHj,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__yoSuB)}
                    color={"softSand"}
                    shape={"rounded"}
                    startIcon={
                      <IconsvgIcon
                        className={classNames(projectcss.all, sty.svg___0At0S)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dky4E
                      )}
                    >
                      {"23"}
                    </div>
                  </Button>
                </div>
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ljuDg
                )}
              >
                {
                  "Boost sales by giving customers special offers and discounts."
                }
              </div>
            </div>
          </div>

          <div
            data-plasmic-name={"rectangle669"}
            data-plasmic-override={overrides.rectangle669}
            className={classNames(projectcss.all, sty.rectangle669)}
          >
            <div
              data-plasmic-name={"group47942"}
              data-plasmic-override={overrides.group47942}
              className={classNames(projectcss.all, sty.group47942)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___8A0LF
                )}
              >
                {"create coupon."}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__n06FG
                )}
              >
                {
                  "Start adding products to your category\nCreate a new category to display on your site."
                }
              </div>

              <Button
                buttonWithBorder={true}
                className={classNames("__wab_instance", sty.button___3LHqP)}
                color={"white"}
                showStartIcon={true}
                startIcon={
                  <IconsvgIcon
                    className={classNames(projectcss.all, sty.svg__m8AKd)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bGen0
                  )}
                >
                  {"Add coupon"}
                </div>
              </Button>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "setting",
    "column",
    "freeBox",
    "h1",
    "img",
    "rectangle669",
    "group47942"
  ],

  setting: ["setting", "column", "freeBox", "h1", "img"],
  column: ["column", "freeBox", "h1", "img"],
  freeBox: ["freeBox", "h1", "img"],
  h1: ["h1"],
  img: ["img"],
  rectangle669: ["rectangle669", "group47942"],
  group47942: ["group47942"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCouponPageAddCoupon__ArgProps,
          internalVariantPropNames: PlasmicCouponPageAddCoupon__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCouponPageAddCoupon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCouponPageAddCoupon";
  } else {
    func.displayName = `PlasmicCouponPageAddCoupon.${nodeName}`;
  }
  return func;
}

export const PlasmicCouponPageAddCoupon = Object.assign(
  // Top-level PlasmicCouponPageAddCoupon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    setting: makeNodeComponent("setting"),
    column: makeNodeComponent("column"),
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    img: makeNodeComponent("img"),
    rectangle669: makeNodeComponent("rectangle669"),
    group47942: makeNodeComponent("group47942"),
    // Metadata about props expected for PlasmicCouponPageAddCoupon
    internalVariantProps: PlasmicCouponPageAddCoupon__VariantProps,
    internalArgProps: PlasmicCouponPageAddCoupon__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCouponPageAddCoupon;
/* prettier-ignore-end */
