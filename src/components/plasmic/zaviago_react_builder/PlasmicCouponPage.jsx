// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: gVLjp5jEanpB9JmP1wfhu5
// Component: erDyGRWQ4s
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: OiEpCGxwidZ/component
import Checkbox from "../../Checkbox"; // plasmic-import: jzUfIEfVTpU/component
import { TableWrapper } from "@plasmicpkgs/antd/skinny/registerTable"; // plasmic-import: LF24IrAPbeRN/codeComponent
import { TableColumn } from "@plasmicpkgs/antd/skinny/registerTable"; // plasmic-import: qJFaUEuzy9Ae/codeComponent
import { TableValue } from "@plasmicpkgs/antd/skinny/registerTable"; // plasmic-import: aOob39p1-Dlv/codeComponent
import { Dropdown } from "@plasmicpkgs/antd/skinny/registerDropdown"; // plasmic-import: cv59X4q0WK/codeComponent
import Menu from "antd/lib/menu/index"; // plasmic-import: Iz_hLKpHZDg/codeComponent
import MenuItem from "antd/lib/menu/MenuItem"; // plasmic-import: HZ6EmQgIQJr/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_zaviago_react_builder.module.css"; // plasmic-import: gVLjp5jEanpB9JmP1wfhu5/projectcss
import sty from "./PlasmicCouponPage.module.css"; // plasmic-import: erDyGRWQ4s/css
import IconsvgIcon from "./icons/PlasmicIcon__Iconsvg"; // plasmic-import: ghfrvXPxoN/icon
import SearchBoldsvgIcon from "./icons/PlasmicIcon__SearchBoldsvg"; // plasmic-import: kQTrm3WIo/icon
import FiltersvgIcon from "./icons/PlasmicIcon__Filtersvg"; // plasmic-import: _Z1N82Qm4/icon
import EllipsissvgIcon from "./icons/PlasmicIcon__Ellipsissvg"; // plasmic-import: BBR0nV4ct8/icon
import framesvgQpMvVUojHj from "./images/framesvg.svg"; // plasmic-import: qpMvVUojHj/picture

export const PlasmicCouponPage__VariantProps = new Array();

export const PlasmicCouponPage__ArgProps = new Array("children");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicCouponPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"setting"}
            data-plasmic-override={overrides.setting}
            className={classNames(projectcss.all, sty.setting)}
          >
            <div className={classNames(projectcss.all, sty.column__wda9J)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__p4Yvt)}>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"coupons."}
                  </h1>

                  <p.PlasmicImg
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"12px"}
                    loading={"lazy"}
                    src={{
                      src: framesvgQpMvVUojHj,
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />

                  <Button
                    className={classNames("__wab_instance", sty.button__rbjBq)}
                    color={"softSand"}
                    shape={"rounded"}
                    startIcon={
                      <IconsvgIcon
                        className={classNames(projectcss.all, sty.svg__ejJwG)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__usDOq
                      )}
                    >
                      {"23"}
                    </div>
                  </Button>
                </div>
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__tseUd
                )}
              >
                {
                  "Boost sales by giving customers special offers and discounts."
                }
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.column___5MT6H)}>
              <div className={classNames(projectcss.all, sty.columns__lqHR)}>
                <div className={classNames(projectcss.all, sty.column__zeLeS)}>
                  <Button
                    className={classNames("__wab_instance", sty.button__sebeg)}
                    showStartIcon={true}
                    startIcon={
                      <IconsvgIcon
                        className={classNames(projectcss.all, sty.svg___6BePg)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e3Mvv
                      )}
                    >
                      {"Add coupon"}
                    </div>
                  </Button>
                </div>
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.columns__acMA)}>
            <div className={classNames(projectcss.all, sty.column__fbip4)}>
              <Checkbox
                data-plasmic-name={"checkbox"}
                data-plasmic-override={overrides.checkbox}
                className={classNames("__wab_instance", sty.checkbox)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__u10Tg
                  )}
                >
                  {" Select all"}
                </div>
              </Checkbox>
            </div>

            <div className={classNames(projectcss.all, sty.column__sw7Ds)}>
              <div className={classNames(projectcss.all, sty.columns__ngzgV)}>
                <div className={classNames(projectcss.all, sty.column__d3K5O)}>
                  <SearchBoldsvgIcon
                    className={classNames(projectcss.all, sty.svg__inqHx)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__z1E2)}>
                  <FiltersvgIcon
                    className={classNames(projectcss.all, sty.svg__lNSyh)}
                    role={"img"}
                  />
                </div>
              </div>
            </div>
          </div>

          <div
            className={classNames(projectcss.all, sty.freeBox__npYN)}
            id={"coupon-table"}
          >
            {true
              ? p.renderPlasmicSlot({
                  defaultContents: (
                    <TableWrapper
                      className={classNames(
                        "__wab_instance",
                        sty.antdTable__iwzg5
                      )}
                      columns={
                        <React.Fragment>
                          <TableColumn
                            className={classNames(
                              "__wab_instance",
                              sty.antdTableColumn__jAswn
                            )}
                            columnTemplate={
                              <ph.DataCtxReader>
                                {$ctx => (
                                  <p.Stack
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__zhKnJ
                                    )}
                                    id={""}
                                  >
                                    <TableValue
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdTableValue__kBViH
                                      )}
                                    />
                                  </p.Stack>
                                )}
                              </ph.DataCtxReader>
                            }
                            dataIndex={"name"}
                            title={""}
                          />

                          <TableColumn
                            className={classNames(
                              "__wab_instance",
                              sty.antdTableColumn__hKQlx
                            )}
                            columnTemplate={
                              <ph.DataCtxReader>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___2JgJ9
                                    )}
                                  >
                                    <TableValue
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdTableValue__iurjH
                                      )}
                                    />
                                  </div>
                                )}
                              </ph.DataCtxReader>
                            }
                            dataIndex={"coupon"}
                            title={""}
                          />

                          <TableColumn
                            className={classNames(
                              "__wab_instance",
                              sty.antdTableColumn___1QgOh
                            )}
                            columnTemplate={
                              <ph.DataCtxReader>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__a8VSt
                                    )}
                                  >
                                    <TableValue
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdTableValue___9QQ1
                                      )}
                                    />
                                  </div>
                                )}
                              </ph.DataCtxReader>
                            }
                            dataIndex={"type"}
                            title={""}
                          />

                          <TableColumn
                            className={classNames(
                              "__wab_instance",
                              sty.antdTableColumn__fJFcG
                            )}
                            columnTemplate={
                              <ph.DataCtxReader>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cWmh9
                                    )}
                                  >
                                    <TableValue
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdTableValue__w8S0D
                                      )}
                                    />
                                  </div>
                                )}
                              </ph.DataCtxReader>
                            }
                            dataIndex={"num"}
                            title={""}
                          />

                          <TableColumn
                            className={classNames(
                              "__wab_instance",
                              sty.antdTableColumn___1Cek
                            )}
                            columnTemplate={
                              <ph.DataCtxReader>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__zpw0G
                                    )}
                                  >
                                    <TableValue
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdTableValue__mQt3L
                                      )}
                                    />
                                  </div>
                                )}
                              </ph.DataCtxReader>
                            }
                            dataIndex={"status"}
                            title={""}
                          />

                          <TableColumn
                            className={classNames(
                              "__wab_instance",
                              sty.antdTableColumn__vyrQj
                            )}
                            columnTemplate={
                              <ph.DataCtxReader>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__rhKqN
                                    )}
                                  >
                                    <Dropdown
                                      className={classNames(
                                        "__wab_instance",
                                        sty.antdDropdown__xctH
                                      )}
                                      overlay={
                                        <Menu
                                          className={classNames(
                                            "__wab_instance",
                                            sty.antdMenu__xKt7F
                                          )}
                                        >
                                          <MenuItem
                                            className={classNames(
                                              "__wab_instance",
                                              sty.antdMenuItem__rYeS
                                            )}
                                            key={"menuItemKey"}
                                          >
                                            <a
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__jPWx
                                              )}
                                              href={`/email-new-order`}
                                            >
                                              {"Manage"}
                                            </a>
                                          </MenuItem>
                                        </Menu>
                                      }
                                      trigger={"click"}
                                    >
                                      <EllipsissvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__bu7HW
                                        )}
                                        role={"img"}
                                      />
                                    </Dropdown>
                                  </div>
                                )}
                              </ph.DataCtxReader>
                            }
                            dataIndex={""}
                            title={""}
                          />
                        </React.Fragment>
                      }
                      items={[
                        {
                          name: "Sale 20% for you",
                          coupon: "20%OFF",
                          type: "Promotions",
                          num: "0/10",
                          status: "Not active"
                        },
                        {
                          name: "Free Ship for all",
                          coupon: "FREESHIP",
                          type: "Free shipping all order",
                          num: "0/50",
                          status: "Active"
                        },
                        {
                          name: "Buy1 Get1 Free",
                          coupon: "1FREE1",
                          type: "Buy 1 Get 1 Free",
                          num: "0/100",
                          status: "Active"
                        },
                        {
                          name: "Sale 20% for you",
                          coupon: "20%OFF",
                          type: "Promotions",
                          num: "0/10",
                          status: "Not active"
                        },
                        {
                          name: "500 sale price",
                          coupon: "500OFF",
                          type: "฿ 500.00 Off",
                          num: "0/50",
                          status: "Active"
                        },
                        {
                          name: "Buy1 Get1 Free",
                          coupon: "1FREE1",
                          type: "Buy 1 Get 1 Free",
                          num: "0/100",
                          status: "Active"
                        },
                        {
                          name: "Sale 20฿",
                          coupon: "SALE20",
                          type: "Sale 20฿",
                          num: "0/100",
                          status: "Active"
                        },
                        {
                          name: "Sale 20% for you",
                          coupon: "20%OFF",
                          type: "Promotions",
                          num: "0/10",
                          status: "Not active"
                        },
                        {
                          name: "Sale 20฿",
                          coupon: "SALE20",
                          type: "Sale 20฿",
                          num: "0/100",
                          status: "Active"
                        },
                        {
                          name: "Sale 20% for you",
                          coupon: "20%OFF",
                          type: "Promotions",
                          num: "0/10",
                          status: "Not active"
                        }
                      ]}
                      size={"large"}
                    />
                  ),

                  value: args.children
                })
              : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "setting", "h1", "img", "checkbox"],
  setting: ["setting", "h1", "img"],
  h1: ["h1"],
  img: ["img"],
  checkbox: ["checkbox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCouponPage__ArgProps,
          internalVariantPropNames: PlasmicCouponPage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCouponPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCouponPage";
  } else {
    func.displayName = `PlasmicCouponPage.${nodeName}`;
  }
  return func;
}

export const PlasmicCouponPage = Object.assign(
  // Top-level PlasmicCouponPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    setting: makeNodeComponent("setting"),
    h1: makeNodeComponent("h1"),
    img: makeNodeComponent("img"),
    checkbox: makeNodeComponent("checkbox"),
    // Metadata about props expected for PlasmicCouponPage
    internalVariantProps: PlasmicCouponPage__VariantProps,
    internalArgProps: PlasmicCouponPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCouponPage;
/* prettier-ignore-end */
